"""
Kill the primary node (with extreme prejudice) in a MongoDB replica set.
Requires an input file that has been generated by mlaunch.


i.e.


mlaunch list --verbose > mlaunch.procs


expect to run this locally so we change electionTimeoutMillis to 500ms down from
its default of 10000ms.


"""
import os
import argparse
import pymongo
import signal
import sys
import time
import pprint


def system(command,exitOnFail=True):
    status = os.system(command)
    if status != 0 and exitOnFail:
        print("'{}' failed".format(command))
        sys.exit(status)
    else:
        return status


def count(i,s):
    return "{}. {}".format(i,s)


if __name__ == "__main__":


    parser = argparse.ArgumentParser()
    parser.add_argument("--host", default="mongodb://localhost:27100/?replicaSet=txntest",
                        help="MongoDB URI [default: %(default)s]")
    parser.add_argument("--delay", default=1.0, type=float,
                        help="break between kill primary [default: %(default)s]")
    parser.add_argument('--iterate', default=0, type=int, help="Interate N times, 0 means iterate forever [default: %(default)s]")
    parser.add_argument('--force', default=False, action="store_true", help="Force shutdown of primary [default: %(default)s]")
    parser.add_argument('--procfile',help="File to read process IDs from [default: mlaunch.procs]")
    parser.add_argument('--electiontimeout', type=int, default=500, help="Election timeout in MS [default: %(default)s]")
    args = parser.parse_args()


    client = pymongo.MongoClient(host=args.host)
    system("mlaunch start", exitOnFail=False)
    config = client.admin.command("replSetGetConfig")
    # pprint.pprint(electionTimeoutMillis)
    currentElectionTimeoutMillis = config["config"]["settings"]["electionTimeoutMillis"]
    print("Current electionTimeoutMillis: {}".format(currentElectionTimeoutMillis))


    if args.electiontimeout != currentElectionTimeoutMillis :
        print("New electionTimeoutMillis    : {}".format(args.electiontimeout))
        config["config"]["settings"]["electionTimeoutMillis"] = args.electiontimeout
        try:
            client.admin.command('replSetReconfig', config["config"], force=True)
        except pymongo.errors.OperationFailure as e:
            print(e)
            raise


    loop_count = 0


    try:
        while True:
            loop_count = loop_count + 1
            if args.iterate > 0 and args.iterate == loop_count:
                break
            print( count( loop_count, "(Re)starting replica-set"))
            system("mlaunch start",exitOnFail=False)
            if not args.procfile:
                print(count(loop_count,"Getting list of mongod processes"))
                system( "mlaunch list --verbose > mlaunch.procs")
                procfile="mlaunch.procs"
                print("Process list written to {}".format(procfile))
            else:
                procfile=args.procfile


            print(count(loop_count, "Getting replica set status"))
            replica_status = client.admin.command( "replSetGetStatus")


            port_map = {}


            if os.path.isfile(procfile):
                with open(procfile) as f:
                    for line in f:
                        if line.startswith('mongod'):
                            #print( loop_count, end="")
                            #print(line)
                            proc_line = line.split()
                            #print('Port: {} PID : {}'.format(proc_line[1], proc_line[3]))
                            if proc_line[3] == "-" :
                                print("Process {} is down".format(int(proc_line[1])))
                            else:
                                port_map[ int(proc_line[1])] = int(proc_line[3])


                    noPrimary=True
                    for rs in replica_status["members"]:
                        if rs[ 'stateStr'] == "PRIMARY" :
                            noPrimary = False
                            (node_name, port) = rs["name"].split(':')
                            pid = port_map[int(port)]
                            print(count(loop_count, "Killing primary node: {}".format(pid)))
                            os.kill(pid, signal.SIGKILL)
                    if noPrimary:
                        print(count(loop_count, "No primary found"))
            else:
                print( "No such file: {}".format(procfile))
                sys.exit(1)


            print(count(loop_count, "Sleeping: {}".format(args.delay)))
            time.sleep(args.delay)
    except KeyboardInterrupt :
        system( "mlaunch stop")
        print("exiting...")
